{"name":"Android LINQ ","tagline":"Manipulate collections easily using C# LINQ style queries and, preferably, Java 8 closures.","body":"# Description\r\n\r\nAndroid LINQ is a small subset of collection manipulation utilities inspired by Microsoft C# LINQ library and targeted at Android developers looking to use new Java 8 Stream() API. \r\n\r\nBy using [Retrolambda for Android](https://github.com/evant/gradle-retrolambda) developers can leverage the power of closures and other new Java 8 features. Unfortunately, it doesn't allow the usage of the Stream API which is arguably its most awesome feature. However, by using it in conjunction with Android LINQ, its possible to perform powerful collection manipulation in just a few lines of code. \r\n\r\nAll in all, if you are not huge fan of Java 8 closures and stuff, you can use Android LINQ stand alone with default Anonymous Class implementations, but this will make things far less attractive to the eyes I must admit. Still feasible...\r\n\r\nAndroid LINQ has little to no impact on performance because it does not make use of reflection or proxies. As its C# counterpart it based on the [monads](http://en.wikipedia.org/wiki/Monad_(functional_programming)) concept, which is a fancy word to describe a sort of [Decorator](http://en.wikipedia.org/wiki/Decorator_pattern) pattern implementation , and many sorting and ordering are just making calls to the default Java API.\r\n\r\nAnyway, you need not to worry. Just add this to your Gradle/Maven and suffer with manual collection iteration no more!\r\n\r\n# Usage\r\n\r\n### Maven\r\n\r\nComing soon!\r\n\r\n### Gradle\r\n\r\nComing soon!\r\n\r\n# Examples\r\n\r\nComing soon!\r\n\r\n# Pull Requests Are Welcome!\r\n\r\nPlease, send feedback and push requests a plenty! \r\nIf you find a bug, is missing a feature or has a improvement suggestion, don't be afraid to please file an issue and I will do my best attend it.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}